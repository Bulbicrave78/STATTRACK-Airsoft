#include <Adafruit_GFX.h>    // Core graphics library
#include <Adafruit_ST7735.h> // Hardware-specific library for ST7735
#include <SPI.h>
#include <AT24C256.h>
#include "StattrackComplet15pt7b.h"


#define BOUTON 3  // Bouton sur la broche 3


// Broche Ecran
#define TFT_CS        10
#define TFT_RST        8 
#define TFT_DC         9
int xstart = 12;
int ystart = 53;
Adafruit_ST7735 tft = Adafruit_ST7735(TFT_CS, TFT_DC, TFT_RST);

int kill = 0;
uint8_t Init = 0; // Stocké sur 1 octet
unsigned long boutonPressTime = 0; // Temps d'appui sur le bouton
bool boutonPressed = false; // Etat du bouton
unsigned long firstPressTime = 0; // Temps du premier appui
int buttonPressCount = 0; // Compteur d'appuis pour le reset
unsigned long buttonPressWindow = 3000; // Fenêtre de 3 secondes pour les appuis multiples

AT24C256 eeprom(0x50);

void setup() {
  pinMode(BOUTON, INPUT_PULLUP); // Bouton avec pull-up interne

  Serial.begin(9600);
  Serial.println("Démarrage...");

  // Lecture des valeurs en EEPROM
  eeprom.read(0, &Init, sizeof(Init));
  eeprom.read(1, (uint8_t*)&kill, sizeof(kill));

  Serial.print("Valeur Init: ");
  Serial.println(Init);
  Serial.print("Kill init: ");
  Serial.println(kill);

  // Vérification de l'initialisation
  if (Init != 1) {  
    Serial.println("Première initialisation...");
    kill = 0;
    Init = 1;
    eeprom.write(0, &Init, sizeof(Init));
    delay(10);  // Attente pour éviter des corruptions mémoire
    eeprom.write(1, (uint8_t*)&kill, sizeof(kill));
    delay(10);
  }
    
  tft.initR(INITR_MINI160x80);
  tft.setFont(&StattrackComplet15pt7b); // Utiliser la police personnalisée
  tft.setRotation(1);
  tft.fillScreen(ST77XX_BLACK);
  delay(1000);
  
  afficherKill(); // Afficher le kill count
}

void loop() {
    unsigned long currentMillis = millis();

    // Vérification de l'état du bouton pour incrémenter le compteur de kills
    if (digitalRead(BOUTON) == LOW) {
        if (!boutonPressed) {
            boutonPressed = true;
            boutonPressTime = currentMillis;

            // Si c'est le premier appui, on démarre la fenêtre de 3 secondes
            if (firstPressTime == 0) {
                firstPressTime = currentMillis;
            }
        }
    } else {
        if (boutonPressed) {
            boutonPressed = false;
            // Lors du relâchement, vérifier l'intervalle de temps
            if (currentMillis - boutonPressTime < 500) {
                buttonPressCount++;  // Incrémenter le compteur d'appuis
                Serial.print("Appui #");
                Serial.println(buttonPressCount);
            }
        }
    }

    // Si 6 appuis sont effectués dans la fenêtre de 3 secondes, réinitialiser les kills
    if (buttonPressCount >= 10 && currentMillis - firstPressTime <= buttonPressWindow) {
        resetKills();  // Réinitialise le compteur de kills
        buttonPressCount = 0;  // Réinitialise le compteur
        firstPressTime = 0;  // Réinitialise la fenêtre de temps
    }

    // Si la fenêtre de 3 secondes se termine avant d'atteindre 6 appuis, réinitialiser le compteur
    if (currentMillis - firstPressTime > buttonPressWindow) {
        buttonPressCount = 0;  // Réinitialise le compteur si le délai est écoulé
        firstPressTime = 0;  // Réinitialise le premier appui
    }

    // Gestion des kills (incrémentation)
    if (digitalRead(BOUTON) == LOW && boutonPressed) {
        kill++;
        Serial.print("Kill: ");
        Serial.println(kill);
        tft.fillScreen(ST77XX_BLACK);
        tft.setCursor(xstart, ystart);
        afficherKill();

        // Sauvegarde dans l'EEPROM
        eeprom.write(1, (uint8_t*)&kill, sizeof(kill));
        delay(10);
    }
}

void afficherKill() {
    int spacing = 25; 
    int x = 7;
    int x1 = 7;
    int x2 = 22;
    tft.setTextColor(tft.color565(YELLOW)); // B V R

    char buffer[7]; // 6 chiffres + null terminator
    sprintf(buffer, "%06d", kill); // Formater avec des 0 devant
    for(int y = 0; y < 6; y++) {
       // tft.fillRect(x1, 22, 22, 33, tft.color565(17, 17, 74)); // Effacer uniquement la zone des kills      
        tft.setCursor(x, ystart);
        tft.print(buffer[y]);
        x1 = x1 + spacing; 
        x2 = x2 + spacing;
        x = x + spacing;
       
    }
}

void resetKills() {
    kill = 0;
    Serial.println("Kills réinitialisés!");
    tft.fillScreen(ST77XX_BLACK);
    tft.setCursor(40, 50);
    tft.print("RESET");
    delay(500);
    // Réinitialisation effectuée, retour au kill count
    tft.fillScreen(ST77XX_BLACK); // Effacer "RESET" de l'écran
    tft.setCursor(xstart, ystart);
    afficherKill();  // Afficher le compteur de kills réinitialisé
    // Sauvegarde dans l'EEPROM
    eeprom.write(1, (uint8_t*)&kill, sizeof(kill));
}
